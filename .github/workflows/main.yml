name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# 환경설정
env:
  DOCKER_IMAGE_BACKEND: ghcr.io/${{ github.actor }}/test-docker/backend
  DOCKER_IMAGE_DATABASE: ghcr.io/${{ github.actor }}/test-docker/database
  DOCKER_IMAGE_FRONTEND: ghcr.io/${{ github.actor }}/test-docker/frontend
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
#       - name: Login to ghcr
#         uses: docker/login-action@v1
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GHCR_TOKEN }}
#       - name: Build and push Backend
#         id: docker_build_backend
#         uses: docker/build-push-action@v2
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           push: true
#           tags: ${{ env.DOCKER_IMAGE_BACKEND }}:latest
#       - name: Build and push Database
#         id: docker_build_database
#         uses: docker/build-push-action@v2
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           push: true
#           tags: ${{ env.DOCKER_IMAGE_DATABASE }}:latest
#       - name: Build and push Frontend
#         id: docker_build_frontend
#         uses: docker/build-push-action@v2
#         with:
#           builder: ${{ steps.buildx.outputs.name }}
#           push: true
#           tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:latest
  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
  # need checkout before using compose-action
    - uses: actions/checkout@v3
    - uses: isbang/compose-action@v1.1.0
      with:
       compose-file: "./docker-compose.yml"
       down-flags: "--volumes"
       services: |
        docker-compose up
